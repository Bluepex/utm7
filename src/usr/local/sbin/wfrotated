#!/usr/local/bin/python3.8
# -*- coding: utf-8 -*-
#
#  Copyright (C) 2014-2019 BluePex Security Company (R)
#  Wesley Peres <wesley.peres@bluepex.com
#  All rights reserved.
#

import sys

sys.path.append('/usr/local/etc/webfilter/')

import signal
import syslog
import re
import os
from datetime import datetime
from argparse import ArgumentParser
import time
#import daemon
from daemonize import Daemonize
import socket
import subprocess
import MySQLdb
from webfilter import process_data
from webfilter import process_data_fapp
from webfilter import set_prestart
from webfilter import create_wft
from webfilter import error_message
import xmltodict
from http_log_process import http_process
from https_log_process import https_process
from alerts_log_process import alerts_process
from sshd_log_process import sshd_process
from webfilter_log_process import webfilter_process
import logging
import select

platform = open("/etc/platform", "r").read().rstrip()
with open('/cf/conf/config.xml') as fd:
	xmldoc = xmltodict.parse(fd.read())

def check_invasion_attempt_log():
	path_file = '/usr/local/www/active_protection/tentativas_invasao'

	exist = os.path.isfile(path_file)

	if not exist:
		file = open(path_file, 'w')
		data = "{\"data\":[]}"
		file.write(str(data))
		file.close()

def connect_db():

	report_settings = xmldoc['bluepex']['system']['webfilter']['nf_reports_settings']
	if report_settings:
		mysqlUser = report_settings['element0']['reports_user']
		mysqlIP = report_settings['element0']['reports_ip']
		mysqlPass = report_settings['element0']['reports_password']
		mysqlDb = report_settings['element0']['reports_db']

		try:
			return MySQLdb.connect(mysqlIP, mysqlUser, mysqlPass, mysqlDb, connect_timeout=3)
		except Exception as error:
			error_message.info("CONNECT DATABASE: {}".format(error))
			return False
	else:
		error_message.info("CONNECT DATABASE: Report settings not configured")
		return False

def exec_create():

	conn = connect_db()
	data_cursor = conn.cursor()

	sql_check = "SHOW TABLES LIKE 'block_country'"
	result = data_cursor.execute(sql_check)

	if not result:
		sql_create = "CREATE TABLE block_country (`id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,`date` datetime DEFAULT NULL,`ip` varchar(255) DEFAULT NULL,`country` varchar(255) DEFAULT NULL,`longitude` varchar(255) DEFAULT NULL,`latitude` varchar(255) DEFAULT NULL,`code` varchar(5) DEFAULT NULL,PRIMARY KEY (`id`),UNIQUE KEY `id` (`id`));"
		data_cursor.execute(sql_create)

	sql_check = "SHOW TABLES LIKE 'http'"
	result_http = data_cursor.execute(sql_check)

	if not result_http:
		sql_create = "CREATE TABLE `http` (`id` bigint(20) unsigned NOT NULL AUTO_INCREMENT, `time_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\
				`url_str` varchar(4096) NOT NULL, `url_path` varchar(4096) NOT NULL, `url_no_qry` varchar(4096) DEFAULT NULL, `categories` varchar(4096) NOT NULL,\
				`elapsed_ms` int(11) DEFAULT NULL, `size_bytes` int(11) DEFAULT NULL, `blocked` tinyint(1) NOT NULL, `ip` varchar(15) NOT NULL, `username` varchar(255) DEFAULT NULL,\
				`groupname` varchar(255) DEFAULT NULL,  PRIMARY KEY (`id`), UNIQUE KEY `id` (`id`), KEY `idx_username` (`username`), KEY `idx_ip` (`ip`),\
				KEY `idx_url_str` (`url_str`(767)), KEY `idx_groupname` (`groupname`), KEY `idx_time_date` (`time_date`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;"
		data_cursor.execute(sql_create)

	sql_check = "SHOW TABLES LIKE 'https'"
	result_https = data_cursor.execute(sql_check)

	if not result_https:
		sql_create = "CREATE TABLE `https` (`id` bigint(20) unsigned NOT NULL AUTO_INCREMENT, `time_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\
				`url_str` varchar(4096) NOT NULL, `url_path` varchar(4096) NOT NULL, `url_no_qry` varchar(4096) DEFAULT NULL, `categories` varchar(4096) NOT NULL,\
				`elapsed_ms` int(11) DEFAULT NULL, `size_bytes` int(11) DEFAULT NULL, `blocked` tinyint(1) NOT NULL, `ip` varchar(15) NOT NULL, `username` varchar(255) DEFAULT NULL,\
				`groupname` varchar(255) DEFAULT NULL,  PRIMARY KEY (`id`), UNIQUE KEY `id` (`id`), KEY `idx_username` (`username`), KEY `idx_ip` (`ip`),\
				KEY `idx_url_str` (`url_str`(767)), KEY `idx_groupname` (`groupname`), KEY `idx_time_date` (`time_date`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;"

		data_cursor.execute(sql_create)

	if not result_http and not result_https:
		sql_alter = "ALTER TABLE `access_categories` MODIFY `accesses_id` bigint(20) unsigned DEFAULT NULL, MODIFY `categories_id` smallint(6) NOT NULL,\
				ADD COLUMN `accesses_id_http` bigint(20) unsigned DEFAULT NULL, ADD COLUMN `accesses_id_https` bigint(20) unsigned DEFAULT NULL, DROP FOREIGN KEY `access_categories_ibfk_1`,\
				DROP FOREIGN KEY `access_categories_ibfk_2`"

		data_cursor.execute(sql_alter)

	sql_check = "SHOW TABLES LIKE 'alerts'"
	result_alerts = data_cursor.execute(sql_check)

	if not result_alerts:
		sql_create = "CREATE TABLE `alerts` (`id` bigint(20) unsigned NOT NULL AUTO_INCREMENT, `time_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\
				`id_rule` varchar(4096) NOT NULL, `action` varchar(256) NOT NULL, `rule` varchar(4096) DEFAULT NULL, `classification` varchar(4096) NOT NULL,\
				`priority` int(11) DEFAULT NULL, `protocol` varchar(256) DEFAULT NULL, `src_ip_port` varchar(256) NOT NULL, `dir` varchar(15) NOT NULL, `dst_ip_port` varchar(256) DEFAULT NULL, PRIMARY KEY (`id`), UNIQUE KEY `id` (`id`),\
				 KEY `idx_time_date` (`time_date`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;"

		data_cursor.execute(sql_create)

	sql_check = "SHOW TABLES LIKE 'sshd'"
	result_sshd = data_cursor.execute(sql_check)

	if not result_sshd:
		sql_create = "CREATE TABLE `sshd` (`id` bigint(20) unsigned NOT NULL AUTO_INCREMENT, `time_date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\
				`action` varchar(4096) NOT NULL, `user` varchar(256) NOT NULL, `src_ip` varchar(256) NOT NULL, `port` varchar(256) DEFAULT NULL, `date` varchar(256) DEFAULT NULL, PRIMARY KEY (`id`), UNIQUE KEY `id` (`id`),\
				 KEY `idx_time_date` (`time_date`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;"

		data_cursor.execute(sql_create)

def bp_classification_types():
	if not '# Bluepex' in open('/usr/local/etc/suricata/classification.config').read():

		f = open ('/usr/local/etc/suricata/classification.config', 'a')

		data = "\n# Bluepex\n"
		data += "config classification: eicar,eicar-group,3\n"
		data += "config classification: google,google-group,3\n"
		data += "config classification: whatsapp,whatsapp-group,3\n"
		data += "config classification: yahoo,yahoo-group,3\n"
		data += "config classification: microsoft,microsoft-group,3\n"
		data += "config classification: telegram,telegram-group,3\n"
		data += "config classification: linkedin,linkedin-group,3\n"
		data += "config classification: skype,skype-group,3\n"
		data += "config classification: facebook,facebook-group,3\n"
		data += "config classification: youtube,youtube-group,3\n"
		data += "config classification: viadeo,viadeo-group,3\n"

		f.write(data)
		f.close()

	if not '# Bluepex Groups' in open('/usr/local/etc/suricata/classification.config').read():

		f = open ('/usr/local/etc/suricata/classification.config', 'a')

		data = "\n# Bluepex Groups\n"

		data += "config classification: blendr,blendr-group,3\n"
		data += "config classification: skout,skout-group,3\n"
		data += "config classification: four-shared,four-shared-group,3\n"
		data += "config classification: americanas,americanas-group,3\n"
		data += "config classification: mercadolivre,mercadolivre-group,3\n"
		data += "config classification: magazineluiza,magazineluiza-group,3\n"
		data += "config classification: spotify,spotify-group,3\n"
		data += "config classification: neenbo,neenbo-group,3\n"
		data += "config classification: thepiratebay,thepiratebay-group,3\n"
		data += "config classification: gmail,gmail-group,3\n"
		data += "config classification: teamviewer,teamviewer-group,3\n"
		data += "config classification: instagram,instagram-group,3\n"
		data += "config classification: messenger,messenger-group,3\n"
		data += "config classification: globoesporte,globoesporte-group,3\n"
		data += "config classification: tinder,tinder-group,3\n"
		data += "config classification: terra,terra-group,3\n"
		data += "config classification: badoo,badoo-group,3\n"
		data += "config classification: netflix,netflix-group,3\n"
		data += "config classification: primevideo,primevideo-group,3\n"
		data += "config classification: vpndetected,vpndetected-group,3\n"
		data += "config classification: p2ptorrent,p2ptorrent-group,3\n"
		data += "config classification: hbo-go,hbo-go-group,3\n"

		f.write(data)
		f.close()

def operationThreatLogs(real_interface, interface_uuid):

	if real_interface != "" and interface_uuid != "":

		service_interface = "suricata_{0}{1}".format(real_interface, interface_uuid)

		if not os.path.exists('/var/log/suricata/{}/http.log'.format(service_interface)):
			syslog.syslog(syslog.LOG_ERR, 'Arquivo http.log do {} nao foi encontrado.'.format(service_interface))
		else:
			file_http = open('/var/log/suricata/{}/http.log'.format(service_interface))
			http_log = http_process(file_http)
			http_log.daemon = True
			http_log.start()

		if not os.path.exists('/var/log/suricata/{}/tls.log'.format(service_interface)):
			syslog.syslog(syslog.LOG_ERR, 'Arquivo tls.log do {} nao foi encontrado.'.format(service_interface))
		else:
			file_https = open('/var/log/suricata/{}/tls.log'.format(service_interface))
			https_log = https_process(file_https)
			https_log.daemon = True
			https_log.start()

		if not os.path.exists('/var/log/suricata/{}/alerts.log'.format(service_interface)):
			syslog.syslog(syslog.LOG_ERR, 'Arquivo alerts.log do {} nao foi encontrado.'.format(service_interface))
		else:
			file_alerts = open('/var/log/suricata/{}/alerts.log'.format(service_interface))
			alerts_log = alerts_process(file_alerts)
			alerts_log.daemon = True
			alerts_log.start()

def return_interface_real(interface_value):
	real_interface = ""
	try:
		if list(interface_value.items())[0][0] == 'if':
			real_interface = list(interface_value.items())[0][1]
		else:
			real_interface = list(interface_value.items())[1][1]
	except:
		pass
	return real_interface.lower()

def main():

	webfilter_log = None
	http_log = None
	https_log = None
	alerts_log = None
	sshd_log = None

	set_prestart()

	f = subprocess.Popen("tail -F /var/log/system.log", stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
	p = select.poll()
	p.register(f.stdout)

	try:

		#Se a tag existir e novo serviço estiver habilitado, use ele
		try:
			rotate_webfilter_service_enable = xmldoc['bluepex']['system']['webfilter']['rotate_webfilter_service']['rotate_webfilter_service_enable'].lower()
		except:
			rotate_webfilter_service_enable = "off"

		try:
			rotate_webfilter_service_old_enable = xmldoc['bluepex']['system']['webfilter']['nf_reports_settings']['element0']['enable'].lower()
		except:
			rotate_webfilter_service_old_enable = "off"

		try:
			rotate_ssh_service_enable = xmldoc['bluepex']['system']['webfilter']['rotate_ssh_service']['rotate_ssh_service_enable'].lower()
		except:
			rotate_ssh_service_enable = "off"

		try:
			rotate_acp_service_enable = xmldoc['bluepex']['system']['webfilter']['rotate_acp_service']['rotate_acp_service_enable'].lower()
		except:
			rotate_acp_service_enable = "off"

		try:
			rotate_fapp_service_enable = xmldoc['bluepex']['system']['webfilter']['rotate_fapp_service']['rotate_fapp_service_enable'].lower()
		except:
			rotate_fapp_service_enable = "off"

		try:
			real_interfaces = xmldoc['bluepex']['interfaces']
		except:
			real_interfaces = []

		try:
			rotate_acp_service_interfaces = xmldoc['bluepex']['system']['webfilter']['rotate_acp_service']['rotate_acp_service_interfaces'].lower().split(",")
		except:
			rotate_acp_service_interfaces = []

		try:
			rotate_fapp_service_interfaces = xmldoc['bluepex']['system']['webfilter']['rotate_fapp_service']['rotate_fapp_service_interfaces'].lower().split(",")
		except:
			rotate_fapp_service_interfaces = []

		#Activation in any version of the analysis
		#Webfilter
		#rotate_webfilter_service_enable
		#rotate_webfilter_service_old_enable
		#rotate_ssh_service_enable
		#rotate_acp_service_enable
		#rotate_fapp_service_enable
		try:
			if (rotate_webfilter_service_enable == "on") or (rotate_webfilter_service_old_enable == "on"):
				webfilter_log = webfilter_process()
				webfilter_log.daemon = True
				webfilter_log.start()
		except:
			pass

		#SSH
		try:
			if (rotate_ssh_service_enable == "on") or (rotate_webfilter_service_old_enable == "on"):
				if not os.path.exists('/var/log/sshd.log'):
					syslog.syslog(syslog.LOG_ERR, 'Arquivo sshd.log n\xc3\xa3o foi encontrado.')
				else:
					file_sshd = open('/var/log/sshd.log')
					sshd_log = sshd_process(file_sshd)
					sshd_log.daemon = True
					sshd_log.start()
		except:
			pass

		#ACP/FAPP
		enable_interfaces = []
		if rotate_webfilter_service_old_enable == "on":
			try:
				enable_interfaces = xmldoc['bluepex']['system']['webfilter']['nf_reports_settings']['element0']['interfaces'].lower().split(",")
			except:
				pass
		elif rotate_webfilter_service_old_enable == "off" and ((rotate_fapp_service_enable == "on") or (rotate_acp_service_enable == "on")):
			try:
				if rotate_acp_service_enable == "on":
					for interface in rotate_acp_service_interfaces:
						enable_interfaces.append(interface.lower())
				if rotate_fapp_service_enable == "on":
					for interface in rotate_fapp_service_interfaces:
						enable_interfaces.append(interface.lower())
			except:
				pass

		for key, val in real_interfaces.items():
			try:
				if isinstance(xmldoc['bluepex']['installedpackages']['suricata']['rule'], list):
					for interface_if in xmldoc['bluepex']['installedpackages']['suricata']['rule']:
						if key == interface_if['interface'] and interface_if['interface'] in enable_interfaces:
							operationThreatLogs(return_interface_real(val), interface_if['uuid'])
				else:
					interface_uuid = ""
					interface_iface = ""
					for interface_if in xmldoc['bluepex']['installedpackages']['suricata']['rule'].items():
						if interface_if[0] == 'uuid':
							interface_uuid = interface_if[1]
						if interface_if[0] == 'interface':
							interface_iface = interface_if[1]
					if interface_iface == key and key in enable_interfaces:
						operationThreatLogs(return_interface_real(val), interface_uuid)
			except:
				pass

		while True:
			if p.poll(1):
				log = f.stdout.readline().decode('utf-8').rstrip()
				if 'sshd' in log:
					#print(f.stdout.readline().decode('utf-8'))
					myCmd = "echo '{}' >> /var/log/sshd.log".format(log)
					os.system(myCmd)
			time.sleep(.1)

	except Exception as error:
		error_message.info("{}\n{}\n".format(error, sys.exc_info()))

if __name__ == '__main__':

	if len(sys.argv) > 1 and sys.argv[1] == "restart":
		os.system("service wfrotated restart")

	if subprocess.check_output(["/bin/pgrep -l -f /usr/local/sbin/wfrotated;exit 0"], shell=True).decode('utf-8') == "":
		error_message.info("Iniciando WFRotated...")
		get_process_port = subprocess.check_output(['sockstat -4l | egrep "^root.*python3.8.*:36547"; exit 0'], shell=True).decode('utf-8')
		os.system('service syslogd stop')

		time.sleep(2)

		if get_process_port != '':
			os.kill(int(get_process_port.split()[2]), 9)

		os.system('pkill -f wft')
		os.system('service syslogd start')

		if subprocess.check_output(["/bin/pgrep -l -f mysql;exit 0"], shell=True).decode('utf-8') != "":
			exec_create()

		#check_invasion_attempt_log()

		#bp_classification_types()

		if subprocess.check_output(["/bin/pgrep -l -f squid;exit 0"], shell=True).decode('utf-8') != "":
			subprocess.call(["/etc/rc.squid_resync_check"], shell=True)

		#with daemon.DaemonContext():
		#set_prestart()
		#main()

		pid = "/var/run/wfrotated.pid"
		daemon = Daemonize(app="monitor", pid=pid, action=main)
		daemon.start()
